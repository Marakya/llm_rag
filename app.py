import base64
import traceback
import streamlit as st
import os
import pickle as pkl

from io import BytesIO
from PyPDF2 import PdfMerger

from utils.config import *
from utils.model import get_collections, insert_data, translate_to_english, get_retriever


st.title("Multimodal RAG Q&A")

tab1, tab2 = st.tabs(["üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"])
with tab1:
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª(—ã)", 
        type=["pdf", "docx", "txt", "png", "jpg"], 
        accept_multiple_files=True
    )
    collection_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"):
        if not uploaded_files:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª.")
        elif not collection_name.strip():
            st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        else:
            # –∏–º—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            first_file = uploaded_files[0]
            fname = first_file.name  
            base_name = os.path.splitext(fname)[0]

            fpath = os.path.abspath(f"./data/{base_name}")
            # fpath_img = os.path.join(fpath, "figures")
            fpath_img = IMAGE_DIR
            os.makedirs(fpath, exist_ok=True)

            # –µ—Å–ª–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª ‚Üí –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            if len(uploaded_files) == 1:
                with open(f"{fpath}/{fname}", "wb") as f:
                    f.write(first_file.getbuffer())
            else:
                # –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ ‚Üí –æ–±—ä–µ–¥–∏–Ω—è–µ–º PDF –≤ –æ–¥–∏–Ω
                pdfs = [file for file in uploaded_files if file.name.lower().endswith(".pdf")]
                if pdfs:
                    merger = PdfMerger()
                    for pdf in pdfs:
                        merger.append(pdf)
                    merged_pdf_path = os.path.join(fpath, fname)  
                    merger.write(merged_pdf_path)
                    merger.close()
               

            with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                insert_data(fpath, fpath_img, fname, collection_name)

            st.success(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# --- –í–∫–ª–∞–¥–∫–∞ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ---
with tab2:
    st.subheader("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

    collections = get_collections()

    if not collections:
        st.info("–ö–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'.")
    else:
        selected_collection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é", collections)
        query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")

        if st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", key="ask_btn"):
            if query.strip() == "":
                st.warning("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
            else:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º retriever –∏ RAG-—Ü–µ–ø–æ—á–∫—É
                    retriever, rag_chain = get_retriever(selected_collection, k=5)
                
                    
                    with st.spinner("–ú–æ–¥–µ–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å..."):
                        query_eng = translate_to_english(query) 
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                        docs = retriever.get_relevant_documents(query_eng)
                        print('docs', docs)
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é RAG-—Ü–µ–ø–æ—á–∫–∏
                        answer = rag_chain.invoke(query_eng)

                    st.subheader("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
                    st.write(answer)

                    st.subheader("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")

                    for i, doc in enumerate(docs):
                        st.markdown(f"**–î–æ–∫—É–º–µ–Ω—Ç {i+1}:**")

                        doc_type = doc.metadata.get("type", "unknown")
                        if doc_type in ("image", "image_summary"):
                            img_path = doc.metadata.get("image_path")
                            if img_path and os.path.exists(img_path):
                                st.image(img_path, caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}")
                            else:
                                # fallback –Ω–∞ base64 –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                                img_b64 = doc.metadata.get("image_b64")
                                if img_b64:
                                    img_data = BytesIO(base64.b64decode(img_b64))
                                    st.image(img_data, caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}")
                                else:
                                    st.write("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                        else:
                            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç
                            st.write(doc.page_content)

                        st.markdown("---")

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                    st.error(traceback.format_exc())
